This is a ecommerce platform called Knitkart.in for buying and selling crochet products. The platform is built using Next.js and MongoDB.
We are using the following technologies:
- Next.js (Javascript)
- Tailwind CSS (CSS)
- MongoDB (Database)
- Appwrite for authentication and file storage
- Every route has page.js, layout.js, actions.js, loader.js, and components folder for the page.
- Use server components as much as possible
- Use server actions as much as possible instead of making api routes (unless needed)
- If client side data fetching is needed, use SWR library
- All pages must be fully mobile responsive
- Prioritize Server Components. Move client components down the tree. To minimize client-side JavaScript, move interactive elements (e.g., components with state, event handlers) into their own Client Components, while keeping the parent components (like layouts and page structures) as Server Components. This avoids sending unnecessary JavaScript to the client.
- whenever you create something new, if there is something left to do, then add a comment with TODO: with it.
- All forms must have client-side validation.
- Use react-hook-form for all forms.
- Loading state should be implemented whenever there is async operations happen and user needs to wait for the response.
- User understandable error messages should be shown to user whenever there is an error.
Think from the perspective of the end user. Always make the user experience as smooth as possible. And the UI should be as elegant as possible.
- Refer Nextjs documentation for best practices.
- Break down large pages into smaller meaningfull components.
- Use Nextjs' streaming with Suspense whenever there are multiple components in a single page. 
- Make sure app is fast by using various stratagies and the latest Next.js features.
All pages andlayouts should be responsive and mobile first.
We use Indian rupee for all prices and currency.

use cache() Function whereever appropriate
``` 
import { cache } from 'react'
// Memoize expensive computations or data fetches 
export const getUser = cache(async (id: string) => { const user = await db.user.findUnique({ where: { id } }) return user }) 
```

we have src/lib/email-auth.js and src/lib/email-templates.js for email sending purposes. Please use this and do not create new service or create something else for email sending.

Design guidelines:
Typography:
Main Headings: font-serif text-5xl lg:text-7xl with text-gray-900
Subheadings: text-2xl sm:text-3xl md:text-4xl font-bold
Section Headers: text-xl sm:text-2xl font-semibold text-gray-900
Body Text: text-lg sm:text-xl text-gray-600
Feature Text: text-gray-700

Colors:
Primary: text-rose-600 for accents and CTAs
Secondary: text-gray-900 for headings
Text Colors: text-gray-600 for body text
Backgrounds:
bg-white
bg-rose-50 for subtle sections
bg-white/80 backdrop-blur-sm for card backgrounds
Pattern background with opacity-5
